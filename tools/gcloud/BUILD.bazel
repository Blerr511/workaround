filegroup(
    name = "gcloud_cli",
    srcs = [":gcloud.sh"],
    visibility = ["//visibility:public"],
)

exports_files(["gcloud.sh"])

sh_binary(
    name = "gcloud",
    srcs = [
        ":gcloud_cli",
    ],
    env = {
        "CLOUDSDK_CONFIG": "$(GCP_CLOUDSDK_CONFIG)",
        "PROJECT_ID": "$(GCP_PROJECT_ID)",
    },
    toolchains = [
        "//sandbox:workspace_env_vars",
        "//sandbox:gcp_env_vars",
    ],
)

sh_binary(
    name = "configure_docker",
    srcs = [
        ":gcloud_cli",
    ],
    args = ["auth configure-docker $(GCP_DOCKER_ARTIFACTS_LOCATION)-docker.pkg.dev"],
    env = {
        "CLOUDSDK_CONFIG": "$(GCP_CLOUDSDK_CONFIG)",
        "PROJECT_ID": "$(GCP_PROJECT_ID)",
    },
    toolchains = [
        "//sandbox:workspace_env_vars",
        "//sandbox:gcp_env_vars",
    ],
)

genrule(
    name = "access_token",
    srcs = [
        ":gcloud_cli",
    ],
    outs = [".access_token"],
    cmd = """
    export CLOUDSDK_CONFIG=$(GCP_CLOUDSDK_CONFIG)
    export PROJECT_ID=$(GCP_PROJECT_ID)
    gcloud auth print-access-token > $@
    """,
    tags = ["requires-network"],
    toolchains = [
        "//sandbox:gcp_env_vars",
        "//sandbox:workspace_env_vars",
    ],
)

load("//sandbox/gcp:defs.bzl", "secret_version")

secret_version(
    name = "sa",
    secret = "$(GCP_DEVELOPMENT_SA_SECRET)",
    visibility = ["//visibility:public"],
)

genrule(
    name = "kubeconfig",
    srcs = [
        ":gcloud_cli",
    ],
    outs = [".kubeconfig"],
    cmd = """
    export CLOUDSDK_CONFIG=$(GCP_CLOUDSDK_CONFIG)
    export PROJECT_ID=$(GCP_PROJECT_ID)
    export KUBECONFIG=$@
    gcloud container clusters get-credentials $(GKE_CLUSTER_NAME_SHORT) --zone $(GKE_CLUSTER_LOCATION) --project $(GCP_PROJECT_ID)
    """,
    tags = ["requires-network"],
    toolchains = [
        "//sandbox:gcp_env_vars",
        "//sandbox:workspace_env_vars",
    ],
    visibility = ["//visibility:public"],
)

genrule(
    name = "npm_package_versions",
    srcs = [
        ":gcloud_cli",
    ],
    outs = ["npm_package_versions.txt"],
    cmd = """
    export CLOUDSDK_CONFIG=$(GCP_CLOUDSDK_CONFIG)
    export PROJECT_ID=$(GCP_PROJECT_ID)
    gcloud artifacts versions list --repository="$(GCP_NPM_ARTIFACTS_REPOSITORY)" --location="$(GCP_NPM_ARTIFACTS_LOCATION)" --package="$(_PACKAGE)" > $@
    """,
    tags = ["requires-network"],
    toolchains = [
        "//sandbox:gcp_env_vars",
        "//sandbox:workspace_env_vars",
    ],
    visibility = ["//visibility:public"],
)

genrule(
    name = "npmrc",
    srcs = [
        ":gcloud_cli",
        ":sa",
    ],
    outs = [".npmrc"],
    cmd = """
    export CLOUDSDK_CONFIG=$(GCP_CLOUDSDK_CONFIG)
    gcloud artifacts print-settings npm --json-key=$(location :sa) --scope $(GCP_NPM_ARTIFACTS_SCOPE) --repository $(GCP_NPM_ARTIFACTS_REPOSITORY) --location $(GCP_NPM_ARTIFACTS_LOCATION) --project $(GCP_PROJECT_ID) > $@
    """,
    tags = ["requires-network"],
    toolchains = [
        "//sandbox:gcp_env_vars",
        "//sandbox:workspace_env_vars",
    ],
    visibility = ["//visibility:public"],
)

# REPO_URL=$(gcloud artifacts repositories describe REPO_NAME --project=PROJECT_ID --format="value(repository.format)")
# TOKEN=$(gcloud auth print-access-token)
