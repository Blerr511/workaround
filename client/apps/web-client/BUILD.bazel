load("@aspect_rules_js//js:defs.bzl", "js_library", "js_run_devserver", "js_test")
load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("//client/bazel:next.bzl", "next")
load("@npm//:next/package_json.bzl", next_bin = "bin")
load("@aspect_rules_ts//ts:defs.bzl", "ts_config", "ts_project")
load("//tools/utils:js_image.bzl", "js_image")

npm_link_all_packages(name = "node_modules")

next_bin.next_binary(
    name = "next_js_binary",
    visibility = ["//visibility:public"],
)

srcs = glob([
    "src/**",
])

src_data = glob(
    [
        "src/**",
    ],
    exclude = [
        "**/*.ts",
        "**/*.tsx",
    ],
)

filegroup(
    name = "project_support_files",
    srcs = glob([
        "*.json",
        ".*.json",
        "*.js",
        ".*.js",
        ".*.css",
    ]),
)

data = glob(
    [
        "*.json",
        "*.js",
    ],
    exclude = ["nodemon.json"],
)

deps = [
    ":node_modules",
    "//:node_modules/next",
    "//:node_modules/react",
    "//:node_modules/react-dom",
    "//:node_modules/typescript",
]

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
)

ts_project(
    name = "ts",
    srcs = srcs,
    allow_js = True,
    data = data + ["project_support_files"],
    declaration = False,
    incremental = True,
    preserve_jsx = True,
    resolve_json_module = True,
    source_map = False,
    tsconfig = ":tsconfig",
    validate = True,
    deps = deps,
)

# Run `bazel build //apps/alpha:next` to build (equivalent to running `next build`).
#
# It is recommended that you use [ibazel](https://github.com/bazelbuild/bazel-watcher)
# to run the devserver targets.
#
# Run `ibazel run //apps/alpha:next_dev` to run the development server in watch mode
# (equivalent to running `next dev`).
#
# Run `ibazel run //apps/alpha:next_start` to run the production server in watch mode
# (equivalent to running `next start`).
next(
    name = "next",
    srcs = glob([
        "src/**",
    ]),
    data = [
        "next.config.js",
        "package.json",
        ":tsconfig",
    ] + deps,
    next_bin = "../../../node_modules/next/dist/bin/next",
    next_js_binary = ":next_js_binary",
)

js_image(
    name = "web-client",
    srcs = srcs + data,
    package_json = "package.json",
    post_install = [
        "cd /app/client/apps/web-client",
        "npm run build",
    ],
    start_cmd = "npm start",
    deps = [
        "//client/packages/ui:ui.json",
        "//server/packages/backend-api:backend-api.json",
    ],
)

js_run_devserver(
    name = "dev",
    args = ["dev"],
    chdir = "client/apps/web-client",
    command = "../../../node_modules/next/dist/bin/next",
    data = [
        ":ts",
    ] + deps + data + src_data,
)

# A smoke test on the artifact produced by the :next target
js_test(
    name = "build_smoke_test",
    chdir = package_name(),
    data = [":next"],
    entry_point = "build_smoke_test.js",
)

js_library(
    name = "package_json",
    srcs = ["package.json"],
    visibility = ["//visibility:public"],
)

js_library(
    name = "jest_config",
    srcs = ["jest.config.js"],
    visibility = ["//visibility:public"],
)

build_test(
    name = "build_test",
    targets = [
        ":next",
        # Not build testing the `:next_export` target since this `next export` writes back to the `.next` directory which
        # causes issues with trying to write to an input. See https://github.com/vercel/next.js/issues/43344.
        # TODO: fix in Next.js (https://github.com/vercel/next.js/issues/43344) or find work-around.
        # ":next_export",
    ],
)

filegroup(
    name = "web-client.json",
    srcs = [":package.json"],
    visibility = ["//visibility:public"],
)
