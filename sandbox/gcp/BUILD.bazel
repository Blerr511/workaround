load("//sandbox/gcp:defs.bzl", "secret_version")

secret_version(
    name = "aws_cloud_builder_ak",
    secret = "$(GCP_AWS_IAM_USER_CLOUD_BUILDER_SA_SECRET)",
)

genrule(
    name = "aws_cloud_builder_ak_id",
    srcs = [":aws_cloud_builder_ak"],
    outs = [".aws_cloud_builder_ak_id_secret_data"],
    cmd = """
    cat $(location :aws_cloud_builder_ak) | base64 --decode | jq ".access_key" | sed "s/\\"//g" > $@
    """,
    visibility = ["//visibility:public"],
)

genrule(
    name = "aws_cloud_builder_ak_secret",
    srcs = [":aws_cloud_builder_ak"],
    outs = [".aws_cloud_builder_ak_secret_secret_data"],
    cmd = """
    cat $(location :aws_cloud_builder_ak) | base64 --decode | jq ".secret_key" | sed "s/\\"//g" > $@
    """,
    visibility = ["//visibility:public"],
)

secret_version(
    name = "gcp_cloud_builder_sa",
    secret = "$(GCP_CLOUD_BUILD_SA_SECRET)",
)

sh_binary(
    name = "active_cloud_builder_sa",
    srcs = ["//tools/gcloud:gcloud_cli"],
    args = [
        "auth",
        "activate-service-account",
        "--key-file=$(location :gcp_cloud_builder_sa)",
    ],
    data = [
        ":gcp_cloud_builder_sa",
    ],
    env = {
        "CLOUDSDK_CONFIG": "$(GCP_CLOUDSDK_CONFIG)",
        "PROJECT_ID": "$(GCP_PROJECT_ID)",
    },
    toolchains = [
        "//sandbox:workspace_env_vars",
        "//sandbox:gcp_env_vars",
    ],
)

secret_version(
    name = "gcp_bastion_ssh_key",
    secret = "$(GCP_AWS_BASTION_HOST_SSH_KEY_SECRET)",
)

secret_version(
    name = "gcp_bastion_public_ip",
    secret = "$(GCP_AWS_BASTION_HOST_PUBLIC_IP_SECRET)",
)

secret_version(
    name = "gcp_bastion_instance_id",
    secret = "$(GCP_AWS_BASTION_INSTANCE_ID)",
)

sh_binary(
    name = "bastion.connect",
    srcs = ["shell/connect-bastion.sh"],
    args = [
        "$(location :gcp_bastion_ssh_key)",
        "$(location :gcp_bastion_instance_id)",
    ],
    data = [
        ":gcp_bastion_instance_id",
        ":gcp_bastion_ssh_key",
    ],
    env = {
        "AWS_CONFIG_FILE": "$(AWS_CONFIG_FILE)",
        "AWS_SHARED_CREDENTIALS_FILE": "$(AWS_SHARED_CREDENTIALS_FILE)",
    },
    toolchains = ["//sandbox:workspace_env_vars"],
)

sh_binary(
    name = "bastion.proxy",
    srcs = ["shell/proxy-bastion.sh"],
    args = [
        "$(location :gcp_bastion_ssh_key)",
        "$(location :gcp_bastion_public_ip)",
        "$(location //deploy/cluster/backend:aws_rds_connection_host)",
        "$(location :gcp_bastion_instance_id)",
    ],
    data = [
        ":gcp_bastion_instance_id",
        ":gcp_bastion_public_ip",
        ":gcp_bastion_ssh_key",
        "//deploy/cluster/backend:aws_rds_connection_host",
    ],
    env = {
        "LOCAL_PORT": "5433",
        "WR_TMP_DATA": "$(WR_TMP_DATA)",
        "AWS_CONFIG_FILE": "$(AWS_CONFIG_FILE)",
        "AWS_SHARED_CREDENTIALS_FILE": "$(AWS_SHARED_CREDENTIALS_FILE)",
    },
    toolchains = ["//sandbox:workspace_env_vars"],
)

sh_binary(
    name = "bastion.proxy_drop",
    srcs = ["shell/drop-bastion-proxy.sh"],
    args = [
        "$(location :gcp_bastion_instance_id)",
    ],
    data = [
        ":gcp_bastion_instance_id",
    ],
    env = {
        "LOCAL_PORT": "5433",
        "WR_TMP_DATA": "$(WR_TMP_DATA)",
        "AWS_CONFIG_FILE": "$(AWS_CONFIG_FILE)",
        "AWS_SHARED_CREDENTIALS_FILE": "$(AWS_SHARED_CREDENTIALS_FILE)",
    },
    toolchains = ["//sandbox:workspace_env_vars"],
)
