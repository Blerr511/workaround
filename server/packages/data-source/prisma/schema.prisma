datasource db {
  provider = "postgresql"
  url      = env("DATA_SOURCE_POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "prisma-client"
}

model MyUser {
  id       Int    @id @default(autoincrement())
  name     String
  lastName String
  email    String @unique
}

model Upload {
  id           Int       @id @default(autoincrement())
  type         String
  objectId     String
  storageClass String
  directory    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

enum VideoEntityType {
  VIDEO
  IMAGE
}

model VideoEntity {
  id              Int             @id @default(autoincrement())
  type            VideoEntityType
  path            String
  VideoFragment   VideoFragment?  @relation(fields: [videoFragmentId], references: [id])
  videoFragmentId Int?
  duration        Int
  order           Int

  @@unique([videoFragmentId, order])
}

model VideoFragment {
  id        Int           @id @default(autoincrement())
  start     Float?
  end       Float?
  entities  VideoEntity[]
  project   VideoProject  @relation(fields: [projectId], references: [id])
  projectId Int
}

model AudoEntity {
  id             Int          @id @default(autoincrement())
  path           String
  fragment       AudoFragment @relation(fields: [audoFragmentId], references: [id])
  audoFragmentId Int          @unique
}

model AudoFragment {
  id        Int          @id @default(autoincrement())
  start     Float?
  end       Float?
  entity    AudoEntity?
  projectId Int
  project   VideoProject @relation(fields: [projectId], references: [id])
}

model VideoProject {
  id    Int             @id @default(autoincrement())
  name  String          @default("")
  video VideoFragment[]
  audio AudoFragment[]
}
