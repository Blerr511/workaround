load("@npm//:defs.bzl", "npm_link_all_packages")
load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_run_binary")
load("@aspect_rules_ts//ts:defs.bzl", "ts_config", "ts_project")
load("//tools/utils:js_image.bzl", "js_image")
load("@npm//server/apps/auth:typeorm/package_json.bzl", typeorm = "bin")
load("@npm//server/apps/auth:ts-node/package_json.bzl", ts_node = "bin")

npm_link_all_packages(name = "node_modules")

filegroup(
    name = "project_support_files",
    srcs = glob([
        "*.js",
        ".*.js",
        ".*.yaml",
        "*.yaml",
    ]),
)

srcs = glob(
    [
        "src/**/*.ts",
        "test/**/*.ts",
        "datasource.ts",
    ],
)

migrations = glob(["migrations/**"])

data = ["project_support_files"]

deps = [
    ":node_modules",
]

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
)

ts_project(
    name = "ts",
    srcs = srcs,
    data = data,
    declaration = True,
    incremental = True,
    source_map = True,
    tsconfig = ":tsconfig",
    validate = True,
    visibility = ["//visibility:public"],
    deps = deps,
)

js_binary(
    name = "start",
    data = [
        ":ts",
    ],
    entry_point = ":src/main.js",
    env = {
        "WEB_EXPOSE_HOST": "$(AUTH_WEB_EXPOSE_HOST)",
        "WEB_EXPOSE_PORT": "$(AUTH_WEB_EXPOSE_PORT)",
        "POSTGRES_HOST": "$(AUTH_POSTGRES_HOST)",
        "POSTGRES_PORT": "$(AUTH_POSTGRES_PORT)",
        "POSTGRES_USERNAME": "$(AUTH_POSTGRES_USERNAME)",
        "POSTGRES_PASSWORD": "$(AUTH_POSTGRES_PASSWORD)",
        "POSTGRES_DATABASE": "$(AUTH_POSTGRES_DATABASE)",
        "POSTGRES_SCHEMA": "$(AUTH_POSTGRES_SCHEMA)",
    },
    toolchains = ["//sandbox:auth_env_vars"],
)

js_image(
    name = "auth",
    srcs = [":ts"],
    image = "$(GCP_DOCKER_AUTH_IMAGE)",
    package_json = "package.json",
    start_cmd = "node src/main.js",
    deps = [
        "//server/packages/logger:logger.json",
    ],
)

ts_project(
    name = "ts_migrations",
    srcs = migrations,
    tsconfig = ":tsconfig",
    validate = False,
    deps = deps,
)

typeorm.typeorm_binary(
    name = "migration.apply",
    args = [
        "migration:run",
        "-d $(location :ts_datasource)",
    ],
    data = [
        ":ts_migrations",
    ],
    env = {
        "POSTGRES_HOST": "$(AUTH_POSTGRES_HOST)",
        "POSTGRES_PORT": "$(AUTH_POSTGRES_PORT)",
        "POSTGRES_USERNAME": "$(AUTH_POSTGRES_USERNAME)",
        "POSTGRES_PASSWORD": "$(AUTH_POSTGRES_PASSWORD)",
        "POSTGRES_DATABASE": "$(AUTH_POSTGRES_DATABASE)",
        "POSTGRES_SCHEMA": "$(AUTH_POSTGRES_SCHEMA)",
    },
    toolchains = ["//sandbox:auth_env_vars"],
)

typeorm.typeorm_binary(
    name = "typeorm",
)

js_run_binary(
    name = "generate_migration_file",
    srcs = [":ts"],
    args = [
        "migration:generate",
        "-d server/apps/auth/datasource.js",
        "{}/migrations/$(NAME)".format(package_name()),
    ],
    env = {
        "POSTGRES_HOST": "$(AUTH_POSTGRES_HOST)",
        "POSTGRES_PORT": "$(AUTH_POSTGRES_PORT)",
        "POSTGRES_USERNAME": "$(AUTH_POSTGRES_USERNAME)",
        "POSTGRES_PASSWORD": "$(AUTH_POSTGRES_PASSWORD)",
        "POSTGRES_DATABASE": "$(AUTH_POSTGRES_DATABASE)",
        "POSTGRES_SCHEMA": "$(AUTH_POSTGRES_SCHEMA)",
    },
    out_dirs = ["migrations"],
    tags = ["requires-network"],
    tool = ":typeorm",
    toolchains = ["//sandbox:auth_env_vars"],
)

genrule(
    name = "a",
    srcs = [":generate_migration_file"],
    outs = ["generated-mig.ts"],
    cmd = """
    FILE=$$(ls $(locations :generate_migration_file))
    cp $(locations :generate_migration_file)/$$FILE $@
    """,
)

# This is what you can `bazel run` and it can write to the source folder
sh_binary(
    name = "m.g",
    srcs = ["update.sh"],
    args = [
        "$(location :a)",
        "{}/migrations".format(package_name()),
    ],
    data = [":a"],
)
