build --define=_TAG=local

# WORKSPACE
build --action_env=APP_ENV=dev
build --action_env=WR_TMP_DATA=/tmp/.wr
build --action_env=PY_VENV="$(WR_TMP_DATA)/.py_virtualenv"
build --action_env=KUBE_CONFIG="$(WR_TMP_DATA)/.kube/config"
build --action_env=GCP_CLOUDSDK_CONFIG="$(WR_TMP_DATA)/.gcloud"
build --action_env=AWS_CONFIG_FILE=$(WR_TMP_DATA)/.aws_config
build --action_env=AWS_SHARED_CREDENTIALS_FILE=$(WR_TMP_DATA)/.aws_credentials
build --action_env=TF_DATA_DIR=$(WR_TMP_DATA)/.tf
build --action_env=XDG_CONFIG_HOME=$(WR_TMP_DATA)/.doctl
# unique identifier
build --action_env=UUID=local
# build --sandbox_writable_path=/tmp/.wr/.doctl

# build --workspace_status_command=./tools/git/commit_hash.sh

# CLUSTER

build --action_env=CLUSTER_NAME=wr

# GCP
build --action_env=GCP_PROJECT_ID=
build --action_env=GCP_PROJECT_NAME=
build --action_env=GCP_REGION=europe-central2
build --action_env=GCP_CLOUD_BUILD_SDK_VERSION="7.0.3"

# GCP Service Accounts
build --action_env=GCP_TERRAFORM_SA="terraform-sa"
build --action_env=GCP_CLOUD_BUILD_SA="cloud-build-sa"
build --action_env=GCP_DEVELOPMENT_SA="development-sa"
build --action_env=GCP_ARTIFACTS_READER_SA=artifacts-reader

# GCP Secrets
build --action_env=GCP_TERRAFORM_SA_SECRET="terraform_sa"
build --action_env=GCP_CLOUD_BUILD_SA_SECRET="cloud-build-sa"
build --action_env=GCP_DEVELOPMENT_SA_SECRET="development-sa"
build --action_env=GCP_ARTIFACTS_READER_SA_SECRET=artifacts-reader-sa
build --action_env=GCP_GITHUB_SSH_KEY_SECRET_NAME="github-ssh-key"
build --action_env=GCP_DO_TF_ACCESS_KEY_SECRET_NAME="digital-ocean-access-key"
build --action_env=GCP_AWS_RDS_POSTGRES_CONNECTION_ENDPOINT_SECRET_NAME="aws-rds-postgres-connection-endpoint"
build --action_env=GCP_AWS_RDS_AUTH_SERVICE_POSTGRES_CONNECTION_ENDPOINT_SECRET_NAME="aws-rds-auth-service-postgres-connection-endpoint"
build --action_env=GCP_AWS_REDIS_ENDPOINT_SECRET_NAME="aws-ecs-redis-endpoint-secret"
build --action_env=GCP_AWS_REDIS_PASSWORD_SECRET_NAME="aws-ecs-redis-password-secret"
build --action_env=GCP_OPENAI_KEY_SECRET_NAME="openai-key-secret"

# GCP Buckets
build --action_env=GCP_BAZEL_REMOTE_CACHE_BUCKET=
build --action_env=GCP_TERRAFORM_BUCKET="$(GCP_PROJECT_NAME)-terraform"

# GCP artifacts
build --action_env=GCP_NPM_ARTIFACTS_SCOPE=@wr
build --action_env=GCP_NPM_ARTIFACTS_REPOSITORY=npm
build --action_env=GCP_NPM_ARTIFACTS_LOCATION=europe-central2

# GCP docker artifacts
build --action_env=GCP_DOCKER_ARTIFACTS_REPOSITORY=service-images
build --action_env=GCP_DOCKER_ARTIFACTS_LOCATION=europe-central2

# Docker image names
build --action_env=GCP_DOCKER_BACKEND_IMAGE=wr-backend
build --action_env=GCP_DOCKER_DATA_SOURCE_IMAGE=wr-data-source
build --action_env=GCP_DOCKER_AUTH_IMAGE=wr-auth
build --action_env=GCP_DOCKER_WEB_CLIENT_IMAGE=wr-client
build --action_env=GCP_DOCKER_PROMPT_IMAGE=wr-prompt
build --action_env=GCP_DOCKER_GATEWAY_IMAGE=wr-gateway

# DIGITAL OCEAN

build --action_env=DO_TF_ACCESS_KEY=

# AWS
build --action_env=AWS_DEFAULT_REGION="eu-north-1"
build --action_env=AWS_REDIS_PORT=8379
## .bazelrc.sensetive
build --action_env=AWS_REDIS_PASSWORD=""

# Specify on your local.bazelrc file
build --action_env=AWS_DEFAULT_ACCESS_KEY_ID=
build --action_env=AWS_DEFAULT_ACCESS_KEY_SECRET=

## RDS
build --action_env=AWS_RDS_POSTGRES_NAME=datasource
build --action_env=AWS_RDS_POSTGRES_DB_NAME=data_source
build --action_env=AWS_RDS_POSTGRES_USERNAME=data_source_user
build --action_env=AWS_RDS_POSTGRES_PASSWORD=$(POSTGRES_PASSWORD) # TODO - move it into .bazelrc.sensetive and save into secrets manager
build --action_env=AWS_RDS_POSTGRES_PORT=5432

## IAM
build --action_env=AWS_IAM_USER_CLOUD_BUILDER=cloud_builder

# AUTHZ
build --action_env=AUTHZ_DOMAIN=
build --action_env=AUTHZ_CLIENT_ID=
build --action_env=AUTHZ_CLIENT_SECRET=

# POSTGRES SERVICE
build --action_env=POSTGRES_HOST=localhost
build --action_env=POSTGRES_PORT=6432
build --action_env=POSTGRES_USERNAME=wruser
build --action_env=POSTGRES_PASSWORD=wrpass
build --action_env=POSTGRES_DATABASE=wr
build --action_env=POSTGRES_URL="postgresql://$(POSTGRES_USERNAME):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DATABASE)"

# REDIS
build --action_env=REDIS_HOST=localhost
build --action_env=REDIS_PORT=$(AWS_REDIS_PORT)
build --action_env=REDIS_PASSWORD=

# RABBITMQ
build --action_env=RABBITMQ_HOST=localhost
build --action_env=RABBITMQ_PORT=5672
build --action_env=RABBITMQ_DEFAULT_USER=carrot
build --action_env=RABBITMQ_DEFAULT_PASS=thisiscarrot

# WEB-CLIENT

build --action_env=WEB_CLIENT_AUTHZ_DOMAIN=$(AUTHZ_DOMAIN)
build --action_env=WEB_CLIENT_AUTHZ_CLIENT_ID=$(AUTHZ_CLIENT_ID)

# DATA-SOURCE
build --action_env=DATA_SOURCE_POSTGRES_URL="postgresql://$(POSTGRES_USERNAME):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DATABASE)?schema=public"

# AUTH
build --action_env=AUTH_WEB_EXPOSE_HOST=localhost
build --action_env=AUTH_WEB_EXPOSE_PORT=3002
build --action_env=AUTH_POSTGRES_HOST=$(POSTGRES_HOST)
build --action_env=AUTH_POSTGRES_PORT=$(POSTGRES_PORT)
build --action_env=AUTH_POSTGRES_USERNAME=$(POSTGRES_USERNAME)
build --action_env=AUTH_POSTGRES_PASSWORD=$(POSTGRES_PASSWORD)
build --action_env=AUTH_POSTGRES_DATABASE=wrauth
build --action_env=AUTH_POSTGRES_SCHEMA=public
build --action_env=AUTH_JWT_SECRET=qazedfrtgb4567
build --action_env=AUTH_JWT_LIFE_SECONDS=3600
## AUTH0
### specify it on your local.bazelrc file
build --action_env=AUTH_AUTHZ_DOMAIN=$(AUTHZ_DOMAIN)
build --action_env=AUTH_AUTHZ_CLIENT_ID=$(AUTHZ_CLIENT_ID)
build --action_env=AUTH_AUTHZ_CLIENT_SECRET=$(AUTHZ_CLIENT_SECRET)

# BACKEND
build --action_env=BACKEND_WEB_EXPOSE_HOST=localhost
build --action_env=BACKEND_WEB_EXPOSE_PORT=3001
build --action_env=BACKEND_AUTH_API_HOST=$(AUTH_WEB_EXPOSE_HOST)
build --action_env=BACKEND_AUTH_API_PORT=$(AUTH_WEB_EXPOSE_PORT)
build --action_env=BACKEND_POSTGRES_HOST=$(POSTGRES_HOST)
build --action_env=BACKEND_POSTGRES_PORT=$(POSTGRES_PORT)
build --action_env=BACKEND_POSTGRES_USERNAME=$(POSTGRES_USERNAME)
build --action_env=BACKEND_POSTGRES_PASSWORD=$(POSTGRES_PASSWORD)
build --action_env=BACKEND_POSTGRES_DATABASE=$(POSTGRES_DATABASE)
build --action_env=BACKEND_AUTH_API_URL=http://$(AUTH_WEB_EXPOSE_HOST):$(AUTH_WEB_EXPOSE_PORT)/api
build --action_env=BACKEND_AUTH_VERIFY_WEBHOOK_URL=http://$(AUTH_WEB_EXPOSE_HOST):$(AUTH_WEB_EXPOSE_PORT)/api/authentication/verify

# GATEWAY
build --action_env=GATEWAY_WEB_EXPOSE_HOST=localhost
build --action_env=GATEWAY_WEB_EXPOSE_PORT=3300
build --action_env=GATEWAY_SERVICE_BACKEND_URL=http://$(BACKEND_WEB_EXPOSE_HOST):$(BACKEND_WEB_EXPOSE_PORT)/graphql

# Image Gen service

# Fill it in your local.bazelrc file
build --action_env=IMAGE_GEN_OPENAI_API_KEY=

# Prompt service

# Fill it in your local.bazelrc file
build --action_env=PROMPT_OPENAI_API_KEY=
build --action_env=PROMPT_REDIS_HOST=$(REDIS_HOST)
build --action_env=PROMPT_REDIS_PORT=$(AWS_REDIS_PORT)
build --action_env=PROMPT_REDIS_DB=1
