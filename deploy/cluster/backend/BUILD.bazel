load("@io_bazel_rules_k8s//k8s:object.bzl", "k8s_object")
load("@io_bazel_rules_k8s//k8s:objects.bzl", "k8s_objects")
load("//sandbox/gcp:defs.bzl", "secret_version")
load("//tools/utils:defs.bzl", "substitution_file")

# TEMP!!
genrule(
    name = "aws_rds_connection_host",
    outs = ["tempdata.txt"],
    cmd = """
    echo "tmp" > $@
    """,
    visibility = ["//visibility:public"],
)

k8s_object(
    name = "config-map",
    cluster = "",
    kind = "service",
    kubeconfig = "//sandbox/cluster:kubeconfig",
    substitutions = {
        "{ name }": "backend",
        "{ DATA_SOURCE_POSTGRES_URL }": "$(DATA_SOURCE_POSTGRES_URL)",
        "{ BACKEND_AUTH_VERIFY_WEBHOOK_URL }": "$(BACKEND_AUTH_VERIFY_WEBHOOK_URL)",
        "{ BACKEND_AUTH_API_URL }": "$(BACKEND_AUTH_API_URL)",
    },
    template = ":k8s-backend.configmap.yaml",
    toolchains = [
        "//sandbox:gcp_env_vars",
        "//sandbox:workspace_env_vars",
        "//sandbox:data_source_env_vars",
        "//sandbox:backend_env_vars",
    ],
)

k8s_object(
    name = "deployement",
    cluster = "",
    image_chroot = "$(GCP_DOCKER_ARTIFACTS_LOCATION)-docker.pkg.dev/$(GCP_PROJECT_ID)/$(GCP_DOCKER_ARTIFACTS_REPOSITORY)",
    images = {
        "$(GCP_DOCKER_ARTIFACTS_LOCATION)-docker.pkg.dev/$(GCP_PROJECT_ID)/$(GCP_DOCKER_ARTIFACTS_REPOSITORY)/$(GCP_DOCKER_BACKEND_IMAGE):{tag}".format(tag = "$(_TAG)"): "//server/apps/backend:backend_image",
    },
    kind = "deployment",
    kubeconfig = "//sandbox/cluster:kubeconfig",
    substitutions = {
        "{ name }": "backend",
        "{ image }": "$(GCP_DOCKER_ARTIFACTS_LOCATION)-docker.pkg.dev/$(GCP_PROJECT_ID)/$(GCP_DOCKER_ARTIFACTS_REPOSITORY)/$(GCP_DOCKER_BACKEND_IMAGE):{tag}".format(tag = "$(_TAG)"),
        "{ backend_port }": "3000",
    },
    template = ":k8s-backend.deployement.yaml",
    toolchains = [
        "//sandbox:gcp_env_vars",
        "//sandbox:workspace_env_vars",
    ],
)

genrule(
    name = "backend_data_source_url",
    srcs = [
        ":aws_rds_connection_host",
        ":aws_rds_postgres_password",
    ],
    outs = ["data_source_connection_string.txt"],
    cmd = """
        export _HOST=$$(cat $(location :aws_rds_connection_host) | awk -F':' '{print $$1}')
        export _PASSWORD=$$(cat $(location :aws_rds_postgres_password))
        export CONNECTION_STRING=postgresql://$(AWS_RDS_POSTGRES_USERNAME):$$_PASSWORD@$$_HOST:$(AWS_RDS_POSTGRES_PORT)/$(AWS_RDS_POSTGRES_DB_NAME)?schema=public

        echo $$CONNECTION_STRING  > $@
    """,
    toolchains = ["//sandbox:aws_env_vars"],
)

genrule(
    name = "backend_data_source_url.local",
    srcs = [":aws_rds_postgres_password"],
    outs = ["data_source_connection_string_local.txt"],
    cmd = """
        export _PASSWORD=$$(cat $(location :aws_rds_postgres_password))

        export CONNECTION_STRING=postgresql://$(AWS_RDS_POSTGRES_USERNAME):$$_PASSWORD@localhost:7432/$(AWS_RDS_POSTGRES_DB_NAME)?schema=public

        echo $$CONNECTION_STRING  > $@
    """,
    toolchains = ["//sandbox:aws_env_vars"],
)

substitution_file(
    name = "backend_data_source_secret_yaml",
    data = [":backend_data_source_url"],
    file = "k8s-backend-data-source.configmap.yaml",
    substitutions = {
        "name": "backend",
        "DATA_SOURCE_POSTGRES_URL": "$$(cat $(location :backend_data_source_url) | base64 | tr -d '[:space:]')",
    },
    toolchains = ["//sandbox:aws_env_vars"],
)

k8s_object(
    name = "data-source-configmap",
    cluster = "",
    kind = "configmap",
    kubeconfig = "//sandbox/cluster:kubeconfig",
    template = ":backend_data_source_secret_yaml",
    toolchains = [
        "//sandbox:gcp_env_vars",
        "//sandbox:workspace_env_vars",
    ],
)

k8s_object(
    name = "service",
    cluster = "",
    kind = "service",
    kubeconfig = "//sandbox/cluster:kubeconfig",
    substitutions = {
        "{ name }": "backend",
        "{ backend_port }": "3000",
    },
    template = ":k8s-backend.service.yaml",
    toolchains = [
        "//sandbox:gcp_env_vars",
        "//sandbox:workspace_env_vars",
    ],
)

k8s_objects(
    name = "backend",
    objects = [
        ":data-source-configmap",
        ":deployement",
        ":service",
        ":config-map",
    ],
    visibility = ["//visibility:public"],
)
