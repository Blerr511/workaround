load("@io_bazel_rules_k8s//k8s:object.bzl", "k8s_object")
load("@io_bazel_rules_k8s//k8s:objects.bzl", "k8s_objects")
load("//sandbox/gcp:defs.bzl", "secret_version")
load("//tools/utils:defs.bzl", "substitution_file")

## CONFIGMAP

substitution_file(
    name = "config_map_yaml",
    file = "k8s-backend.configmap.yaml",
    substitutions = {
        "DATA_SOURCE_POSTGRES_URL": "$(DATA_SOURCE_POSTGRES_URL)",
        "BACKEND_AUTH_VERIFY_WEBHOOK_URL": "$(BACKEND_AUTH_VERIFY_WEBHOOK_URL)",
        "BACKEND_AUTH_API_URL": "$(BACKEND_AUTH_API_URL)",
        "WEB_EXPOSE_PORT": "$(BACKEND_WEB_EXPOSE_PORT)",
    },
    toolchains = [
        "//sandbox:gcp_env_vars",
        "//sandbox:workspace_env_vars",
        "//sandbox:data_source_env_vars",
        "//sandbox:backend_env_vars",
    ],
)

k8s_object(
    name = "config-map",
    cluster = "",
    kind = "configmap",
    kubeconfig = "//sandbox/cluster:kubeconfig",
    template = ":config_map_yaml",
)

## DATA SOURCE CONFIGMAP - TODO move to secret claim

substitution_file(
    name = "backend_data_source_secret_yaml",
    data = [
        "//sandbox/gcp/secrets:backend_data_source_endpoint",
    ],
    file = "k8s-backend-data-source.configmap.yaml",
    substitutions = {
        "name": "backend",
        "DATA_SOURCE_POSTGRES_URL": "$$(cat $(location //sandbox/gcp/secrets:backend_data_source_endpoint) | base64 | tr -d '[:space:]')",
    },
    toolchains = ["//sandbox:aws_env_vars"],
)

k8s_object(
    name = "data-source-configmap",
    cluster = "",
    kind = "configmap",
    kubeconfig = "//sandbox/cluster:kubeconfig",
    template = ":backend_data_source_secret_yaml",
    toolchains = [
        "//sandbox:gcp_env_vars",
        "//sandbox:workspace_env_vars",
    ],
)

## DEPLYOEMENT

substitution_file(
    name = "backend_deployement_yaml",
    file = "k8s-backend.deployement.yaml",
    substitutions = {
        "BACKEND_PORT": "$(BACKEND_WEB_EXPOSE_PORT)",
        "IMAGE": "$(GCP_DOCKER_ARTIFACTS_LOCATION)-docker.pkg.dev/$(GCP_PROJECT_ID)/$(GCP_DOCKER_ARTIFACTS_REPOSITORY)/$(GCP_DOCKER_BACKEND_IMAGE):$(_TAG)",
    },
    toolchains = [
        "//sandbox:backend_env_vars",
        "//sandbox:gcp_env_vars",
        "//sandbox:workspace_env_vars",
    ],
)

k8s_object(
    name = "deployement",
    cluster = "",
    image_chroot = "$(GCP_DOCKER_ARTIFACTS_LOCATION)-docker.pkg.dev/$(GCP_PROJECT_ID)/$(GCP_DOCKER_ARTIFACTS_REPOSITORY)",
    images = {
        "$(GCP_DOCKER_ARTIFACTS_LOCATION)-docker.pkg.dev/$(GCP_PROJECT_ID)/$(GCP_DOCKER_ARTIFACTS_REPOSITORY)/$(GCP_DOCKER_BACKEND_IMAGE):{tag}".format(tag = "$(_TAG)"): "//server/apps/backend:backend_image",
    },
    kind = "deployment",
    kubeconfig = "//sandbox/cluster:kubeconfig",
    template = ":backend_deployement_yaml",
    toolchains = [
        "//sandbox:gcp_env_vars",
        "//sandbox:workspace_env_vars",
    ],
)

## Migration Job

substitution_file(
    name = "data_source_migration_job_yaml",
    file = "k8s-backend-migration.job.yaml",
    substitutions = {
        "UUID": "$(UUID)",
        "IMAGE": "$(GCP_DOCKER_ARTIFACTS_LOCATION)-docker.pkg.dev/$(GCP_PROJECT_ID)/$(GCP_DOCKER_ARTIFACTS_REPOSITORY)/$(GCP_DOCKER_DATA_SOURCE_IMAGE):{tag}".format(tag = "$(_TAG)"),
    },
    toolchains = [
        "//sandbox:gcp_env_vars",
        "//sandbox:workspace_env_vars",
    ],
)

k8s_object(
    name = "data-source-migration-job",
    cluster = "",
    image_chroot = "$(GCP_DOCKER_ARTIFACTS_LOCATION)-docker.pkg.dev/$(GCP_PROJECT_ID)/$(GCP_DOCKER_ARTIFACTS_REPOSITORY)",
    images = {
        "$(GCP_DOCKER_ARTIFACTS_LOCATION)-docker.pkg.dev/$(GCP_PROJECT_ID)/$(GCP_DOCKER_ARTIFACTS_REPOSITORY)/$(GCP_DOCKER_DATA_SOURCE_IMAGE):{tag}".format(tag = "$(_TAG)"): "//server/packages/data-source:data-source_image",
    },
    kind = "job",
    kubeconfig = "//sandbox/cluster:kubeconfig",
    template = ":data_source_migration_job_yaml",
    toolchains = [
        "//sandbox:gcp_env_vars",
        "//sandbox:workspace_env_vars",
    ],
)

## Service

substitution_file(
    name = "backend_service_yaml",
    file = "k8s-backend-service.yaml",
    substitutions = {
        "WEB_EXPOSE_PORT": "$(BACKEND_WEB_EXPOSE_PORT)",
    },
    toolchains = [
        "//sandbox:backend_env_vars",
    ],
)

k8s_object(
    name = "backend_lb_service",
    cluster = "",
    kind = "service",
    kubeconfig = "//sandbox/cluster:kubeconfig",
    template = ":backend_service_yaml",
)

k8s_objects(
    name = "backend",
    objects = [
        ":data-source-configmap",
        ":deployement",
        ":config-map",
        ":backend_lb_service",
    ],
    visibility = ["//visibility:public"],
)
